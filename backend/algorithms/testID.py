try:
    # When executed as a module (python -m backend_flask.algorithms.testID)
    from .generateID import ChecksumIdGenerator, Preset, generate_id
    from .verifyID import verify_id
except ImportError:
    # Fallback for direct script execution from the algorithms folder
    from generateID import ChecksumIdGenerator, Preset, generate_id  # type: ignore
    from verifyID import verify_id  # type: ignore

if __name__ == "__main__":
    gen = ChecksumIdGenerator()

    # --- basic tests ---
    sample = [1, 2, 3, 4]  # contributes 1 + 4 + 3 + 8 = 16; 16 % 7 = 2
    print("weighted_sum_mod_7(sample):", gen.weighted_sum_mod_7(sample))  # -> 2
    print("compute_checksum(sample):", gen.compute_checksum(sample))      # -> 5

    # --- segment generation ---
    print("Segment A (Medicore):", gen.build_segment_a("Medicore"))       # Example: '104x'
    print("Segment B (prescribed):", gen.build_segment_b(True))           # Example: '1xxxxxC'

    # --- full ID and verification ---
    sample_id = generate_id(True, "Acme Pharma")
    print("Full ID (no space):", sample_id, "valid?", verify_id(sample_id))

    spaced_id = ChecksumIdGenerator.generate_full_id(
        prescribed=False,
        company_name="Pharmatech",
        sep=" ",
    )
    print("Full ID (spaced):", spaced_id, "valid?", verify_id(spaced_id))

    # --- demonstrate failure cases ---
    """10151137443 is generated by generate id"""
    print("Tampered ID:", "10151137443", "valid?", verify_id("10151137443"))
    print("Tampered ID:", "10151137442", "valid?", verify_id("10151137442"))
    print("Tampered ID:", "10121137443", "valid?", verify_id("10121137443"))
